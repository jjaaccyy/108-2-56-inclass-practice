---
title: '0502'
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}
a <- c(2, 3, 5)
b <- c(4,-1, 3)
a+b
a-b
a*b
a/b
a %% b
a ** b
```
```{r}
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
print(sequenceNums)

sequenceNums %% 2 # 餘數為1則是奇數，0則是偶數
```
```{r}
example <- list(
  name=c("小明","小花","小新","美美"),
  height=c(175,166,170,160),
  weight=c(77,NA,60,43),
  birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
  hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
  residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
  allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
  bloodType=c("A","B","B","O")
)
```
```{r}
pick_above170 <- example[["height"]] >= 170
example$name[pick_above170]
```

```{r}
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
str(transcript100to103)
```
```{r}
# 各學屆2年級人數
table(transcript100to103$學屆)
# 各學屆2年級成績大於85年數
# 只要成績大於85的
pick_above85 <-
  transcript100to103$`成績` > 85
table(transcript100to103$學屆[pick_above85])
```
```{r}
library(lubridate)
print(example[c("name","birthday")])

pick_after98 <- example$birthday >= ymd("1998-01-01")
example$name[pick_after98]
```
```{r}
source("https://www.dropbox.com/s/16h6ggua6qtydci/exchangeRate.R?dl=1")
```
```{r}
str(exchangeRate)
```
```{r}
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-
  exchangeRate$期間 >= ymd("1998-01-01")
exchangeRate_after98 <-
  list(
    `期間`=exchangeRate$`期間`[pick_after98_01],
    `幣別`=exchangeRate$`幣別`[pick_after98_01],
    `匯率`=exchangeRate$`匯率`[pick_after98_01]
    
  )
str(exchangeRate_after98)
```
```{r}
example$allowance <-
  factor(
    example$allowance,
    levels=c("0-1000", "1001-2000", "2000+"),
    ordered = T # 設定為可排序factor
  )
```

```{r}
print(example[c("name","allowance")])

pick_allowanceOver1000 <- example$allowance >= "1001-2000"
example$name[pick_allowanceOver1000]
```
```{r}
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
```
```{r}
list_victimAges_female$數目 <- as.integer(list_victimAges_female$數目)
list_victimAges_female$年齡層 <- as.factor(list_victimAges_female$年齡層)
str(list_victimAges_female)
```
```{r}
levels(list_victimAges_female$年齡層) -> levels_ages
print(levels_ages)
```
```{r}
levels_new <- c(levels_ages[c(12,13,1,8,2:7,9:11)])
print(levels_new)
levels(list_victimAges_female$年齡層) <- levels_new
list_victimAges_female$年齡層 <- ordered(list_victimAges_female$年齡層)
```
```{r}
pick_above30 <- 
  list_victimAges_female$年齡層 >= "30_39歲"
sum(list_victimAges_female$數目, na.rm=T)
sum(list_victimAges_female$數目[pick_above30], na.rm = T)
```
```{r}
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
pick_evens <- sequenceNums %% 2 ==0
sequenceNums[pick_evens]
```
```{r}
x <- c(1,5,8)
y <- c(5,8)

# x裡的元素值是不是屬於y集合
x %in% y
```
```{r}
print(example[c("name","residence")])

set_TaipeiMetro <- c("Taipei","New Taipei")
pick_fromTaipeiMetro <- example$residence %in% set_TaipeiMetro
example$name[pick_fromTaipeiMetro]
```
```{r}
str(transcript100to103)

setLawBusiness <- c("法學院","商學院")
pickLawBusiness <- transcript100to103$`學系` %in% setLawBusiness
transcript100to103$`成績`[pickLawBusiness]
unique(transcript100to103$`學系`)
```
```{r}
list_victimAges_female$`數目` <- as.integer(list_victimAges_female$`數目`)
```


```{r}
list_victimAges_female$`數目` <- as.integer(list_victimAges_female$`數目`)
pick_na <- is.na(list_victimAges_female$`數目`)
sum(pick_na)

```
```{r}
print(example[c("name","hobby")])

pick_loveFood <- stringr::str_detect(example$hobby,"美食")
example$name[pick_loveFood]
```
```{r}
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") ->
  garbageRoutes
#  1 用typeof()函數查詢電腦實質上如何看待garbageRoutes。
typeof(garbageRoutes)  
#  2 用class()函數查詢電腦把它能進行的操作運算歸屬於哪一類型。
class(garbageRoutes)
```
```{r}
factor(garbageRoutes$linename) -> garbageRoutes$linename
levels(garbageRoutes$linename)
pick_afternoonRoutes <-
  stringr::str_detect(
    garbageRoutes$linename,
    "下午"
  )
garbageRoutes$linename[pick_afternoonRoutes]
```

```{r}
?str_detect
```
```{r}
library(stringr)
fruit <- c("apple", "banana", "pear", "pinapple")
!str_detect(fruit, "a")
str_detect(fruit, "^a")
str_detect(fruit, "a$")
str_detect(fruit, "b")
str_detect(fruit, "[aeiou]")

# Also vectorised over pattern
str_detect("aecfg", letters)

# Returns TRUE if the pattern do NOT match
str_detect(fruit, "^p", negate = TRUE)
```
```{r}
CDC_chatbox <- readr::read_csv("http://od.cdc.gov.tw/pr/CDC_chatbox.csv")
pick_lung <- stringr::str_detect(CDC_chatbox$Question,"肺炎")
CDC_chatbox$Question[pick_lung]
```





```{r cars}
summary(cars)
```

## Including Plots

You can also embed plots, for example:

```{r pressure, echo=FALSE}
plot(pressure)
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
