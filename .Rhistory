list_victimAges_female$年齡層 >= "30_39歲"
sum(list_victimAges_female$數目, na.rm=T)
sum(list_victimAges_female$數目[pick_above30], na.rm = T)
pick_above30 <-
list_victimAges_female$年齡層 >= "30_39歲"
sum(list_victimAges_female$數目, na.rm=T)
sum(list_victimAges_female$數目[pick_above30], na.rm = T)
pick_above30 <-
list_victimAges_female$年齡層 >= "30_39歲"
sum(list_victimAges_female$數目, na.rm=T)
sum(list_victimAges_female$數目[pick_above30], na.rm = T)
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
pick_evens <- sequenceNums %% 2 ==0
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
pick_evens <- sequenceNums %% 2 ==0
sequenceNums[[pick_evens]]
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
pick_evens <- sequenceNums %% 2 ==0
sequenceNums[pick_evens]
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
list_victimAges_female$數目 <- as.integer(list_victimAges_female$數目)
list_victimAges_female$年齡層 <- as.factor(list_victimAges_female$年齡層)
str(list_victimAges_female)
levels(list_victimAges_female$年齡層) -> levels_ages
print(levels_ages)
x <- c(1,5,8)
y <- c(5,8)
# x裡的元素值是不是屬於y集合
x %in% y
print(example[c("name","residence")])
str(transcript100to103)
str(transcript100to103)
setLawBusiness <- c("法學院","商學院")
pickLawBusiness <- transcript100to103$學系 %in% setLawBusiness
transcript100to103[pickLawBusiness]
str(transcript100to103)
setLawBusiness <- c("法學院","商學院")
pickLawBusiness <- transcript100to103$學系 %in% setLawBusiness
transcript100to103$學系[pickLawBusiness]
unique(transcript100to103$學院)
unique(transcript100to103$學系)
list_victimAges_female$`數目` <- as.integer(list_victimAges_female$數目)
list_victimAges_female$`數目` <- as.integer(list_victimAges_female$`數目`)
View(list_victimAges_female)
pick_na <- is.na(list_victimAges_female$`數目`)
sum(pick_na)
pick_na <- is.na(list_victimAges_female$`數目`)
sum(pick_na)
print(pick_na)
pick_na <- is.na(list_victimAges_female$`數目`)
sum(pick_na)
print(pick_na)
0/0
list_victimAges_female$`數目` <- as.integer(list_victimAges_female$`數目`)
pick_na <- is.na(list_victimAges_female$`數目`)
sum(pick_na)
print(example[c("name","hobby")])
pick_loveFood <- stringr::str_detect(example$hobby,"美食")
example$name[pick_loveFood]
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") ->
garbageRoutes
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") ->
garbageRoutes
#  1 用typeof()函數查詢電腦實質上如何看待garbageRoutes。
typeof(garbageRoutes)
#  2 用class()函數查詢電腦把它能進行的操作運算歸屬於哪一類型。
class(garbageRoutes)
factor(garbageRoutes$linename) -> garbageRoutes$linename
View(garbageRoutes)
factor(garbageRoutes$linename) -> garbageRoutes$linename
levels(garbageRoutes$linename)
factor(garbageRoutes$linename) -> garbageRoutes$linename
levels(garbageRoutes$linename)
pick_afternoonRoutes <-
stringr::str_detect(
garbageRoutes$linename,
"下午"
)
factor(garbageRoutes$linename) -> garbageRoutes$linename
levels(garbageRoutes$linename)
pick_afternoonRoutes <-
stringr::str_detect(
garbageRoutes$linename,
"下午"
)
garbageRoutes$linename[pick_afternoonRoutes]
str_detect
?str_detect
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
library(stringr)
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
str_detect(fruit, "^a")
library(stringr)
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
str_detect(fruit, "^a")
str_detect(fruit, "a$")
str_detect(fruit, "b")
library(stringr)
fruit <- c("apple", "banana", "pear", "pinapple")
!str_detect(fruit, "a")
str_detect(fruit, "^a")
str_detect(fruit, "a$")
str_detect(fruit, "b")
str_detect(fruit, "[aeiou]")
# Also vectorised over pattern
str_detect("aecfg", letters)
# Returns TRUE if the pattern do NOT match
str_detect(fruit, "^p", negate = TRUE)
CDC_chatbox <- readr::read_csv("http://od.cdc.gov.tw/pr/CDC_chatbox.csv")
View(CDC_chatbox)
CDC_chatbox <- readr::read_csv("http://od.cdc.gov.tw/pr/CDC_chatbox.csv")
pick_lung <- stringr::str_detect(CDC_chatbox$Question == "肺炎")
CDC_chatbox <- readr::read_csv("http://od.cdc.gov.tw/pr/CDC_chatbox.csv")
pick_lung <- stringr::str_detect(CDC_chatbox$Question,"肺炎")
CDC_chatbox$Question[pick_lung]
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
View(badEmployers)
unique(badEmployers$law) -> violatedArticles
violatedArticles
class(violatedArticles)
# 各學屆2年級人數
table(transcript100to103$學屆)
table_countsByArticle -> table(badEmployers$law)
table_countsByArticle <- table(badEmployers$law)
table_countsByArticle
names(table_countsByArticle)
unique(badEmployers$law) -> violatedArticles
violatedArticles
levels(badEmployers$law) -> violatedArticles
violatedArticles
levels(factor(badEmployers$law)) -> violatedArticles
violatedArticles
table_countsByArticle <- table(badEmployers$law)
table_countsByArticle
names(table_countsByArticle)
names(table_countsByArticle)
class(table_countsByArticle)
mostViolatedArticle <- table_countsByArticle >= max(table_countsByArticle)
mostViolatedArticle <- table_countsByArticle >= max(table_countsByArticle)
mostViolatedArticle
mostViolatedArticle <- table_countsByArticle >= max(table_countsByArticle)
badEmployers$law[mostViolatedArticle] -> mostViolatedArticle
mostViolatedArticle
pick_violation <- table_countsByArticle >= max(table_countsByArticle)
table_countsByArticle[pick_violation] -> mostViolatedArticle
pick_violation <- table_countsByArticle >= max(table_countsByArticle)
table_countsByArticle[pick_violation] -> mostViolatedArticle
mostViolatedArticle
pick_violation <- table_countsByArticle >= max(table_countsByArticle)
table_countsByArticle[pick_violation] -> mostViolatedArticle
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
mostViolatedArticle
pick_violation <- table_countsByArticle >= max(table_countsByArticle)
table_countsByArticle[pick_violation] -> mostViolatedArticle
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
mostViolatedArticle
levels(factor(badEmployers$lawContent))
table(badEmployers$law)
table(badEmployers$lawContent) -> table_lawContent
pick_lawContent<- table_lawContent == max(table_lawContent)
mostViolatedArticle_content<- badEmployers$lawContent[pick_lawContent]
mostViolatedArticle_content
table(badEmployers$lawContent) -> table_lawContent
pick_lawContent<- table_lawContent == max(table_lawContent)
mostViolatedArticle_content<- badEmployers$lawContent[pick_lawContent]
mostViolatedArticle_content
table(badEmployers$lawContent) -> table_lawContent
pick_lawContent<- table_lawContent >= max(table_lawContent)
mostViolatedArticle_content<- table_lawContent[pick_lawContent]
mostViolatedArticle_content
class(mostViolatedArticle_content)
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
table(badEmployers$lawContent)
mostViolatedArticle_content
read_csv("https://www.dropbox.com/s/xjzg1iuuws7tcha/table.csv?dl=1") -> table
source("https://www.dropbox.com/s/5oy56om4q0857tt/student10.R?dl=1",encoding = "UTF-8")
levelsnews <- c(table$國文[c(15:1)])
levelsnews <- c(table$`國文`[c(15:1)])
levelsnews <- c(table$`國文`[c(15:1)])
chinese <- factor(table$`國文`,
levels=levelsnews)
# chinese
levelsnews <- c(table$`國文`[c(15:1)])
chinese <- factor(table$`國文`,
levels=levelsnews)
chinese
levelsnews <- c(table$`國文`[c(15:1)])
chinese <- factor(table$`國文`,
levels=levelsnews,
ordered=T)
chinese
levelsnews <- c(table$`國文`[c(15:1)])
chinese <- factor(levelsnews,
levels=levelsnews,
ordered=T)
chinese
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
View(badEmployers)
levels(factor(badEmployers$law)) -> violatedArticles
violatedArticles
table_countsByArticle <- table(badEmployers$law)
table_countsByArticle
pick_violation <- table_countsByArticle >= max(table_countsByArticle)
pick_violation <- table_countsByArticle >= max(table_countsByArticle)
table_countsByArticle[pick_violation] -> mostViolatedArticle
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
mostViolatedArticle
class(mostViolatedArticle)
table_countsByArticle
badEmployers$lawContent[pick_violation]
mostViolatedArticle_content
badEmployers$lawContent[pick_violation] -> mostViolatedArticle_content
mostViolatedArticle_content
names(table_countsByArticle)
class(table_countsByArticle)
pick_violation
table_countsByArticle
table_lawscontent <- table(badEmployers$lawContent)
table_lawscontent
pick_lawscontent <- table_lawscontent >= max(table_lawscontent)
pick_lawscontent
table_lawscontent <- table(badEmployers$lawContent)
pick_lawscontent <- table_lawscontent >= max(table_lawscontent)
table_lawscontent[pick_lawscontent] -> mostViolatedArticle_content
mostViolatedArticle_content <- names(mostViolatedArticle_content)
mostViolatedArticle_content
as.character(mostViolatedArticle_content)
length(mostViolatedArticle_content)
class(mostViolatedArticle_content)
table_dt <- table(badEmployers$dt)
table_dt
# popularSentenceMonth
table_dt <- table(badEmployers$dt)
pick_dt <- table_dt >= max(table_dt)
table_dt[pick_dt] -> popularSentenceMonth
popularSentenceMonth <- names(popularSentenceMonth)
class(popularSentenceMonth)
length(popularSentenceMonth)
# popularSentenceMonth
table_dt <- table(badEmployers$dt)
pick_dt <- table_dt >= max(table_dt)
table_dt[pick_dt] -> popularSentenceMonth
popularSentenceMonth <- names(popularSentenceMonth)
class(popularSentenceMonth)
length(popularSentenceMonth)
# popularSentenceMonth
popularSentenceMonth
levelsnews <- c(table$`國文`[c(15:1)])
read_csv("https://www.dropbox.com/s/xjzg1iuuws7tcha/table.csv?dl=1") -> table
source("https://www.dropbox.com/s/5oy56om4q0857tt/student10.R?dl=1",encoding = "UTF-8")
levelsnews <- c(table$`國文`[c(15:1)])
chinese <- factor(levelsnews,
levels=levelsnews,
ordered=T)
chinese
pick_ntpu <- stringr::str_detect(students10$`志願`,"北大")
ntpu_namelist <- students10$`姓名`[pick_ntpu]
ntpu_namelist
View(students10)
pick_1 <- students10$`國文`[pick_ntpu] >= 12
pick_1
# ntpu_econtpu_eco
c(students10$`英文`) + c(students10$`數學`) -> mix
mix
pick_1 <- students10$`國文`[pick_ntpu] >= 12
c(students10$`英文`) + c(students10$`數學`) -> mix
pick_2 <- mix >= 26
pick_2
pick_1 <- students10$`國文`[pick_ntpu] >= 12
c(students10$`英文`) + c(students10$`數學`) -> mix
pick_2 <- pick_1[mix] >= 26
pick_2
levelsnews <- c(table$`國文`[c(16:1)])
chinese <- factor(levelsnews,
levels=levelsnews,
ordered=T)
chinese
levelsnews <- c(table$`國文`[c(15:1)])
chinese <- factor(levelsnews,
levels=levelsnews,
ordered=T)
chinese
pick_1 <- students10$`國文`[pick_ntpu] >= 12
names(pick_1)
pick_1 <- students10$`國文`[pick_ntpu] >= 12
pick_1
# ntpu_econtpu_eco
students10$`姓名`[pick_1]
str(students10)
students10$`姓名`[pick_1]
students10$`英文`[pick_1]
students10$`數學`[pick_1] -> pick_math2
str(students10)
pick_1 <- students10$`國文`[pick_ntpu] >= 12
students10$`英文`[pick_1] -> pick_En2
students10$`數學`[pick_1] -> pick_math2
pick_2 <- pick_math2 + pick_En2 >= 26
pick_2
# ntpu_econtpu_eco
pick_1 <- students10$`國文`[pick_ntpu] >= 12
students10$`英文`[pick_1] -> pick_En2
students10$`數學`[pick_1] -> pick_math2
pick_2 <- pick_math2 + pick_En2 >= 26
students10$`姓名`[pick_2] -> ntpu_eco
class(ntpu_eco)
ntpu_eco
students10$`志願` -> all_college
all_college
ntpu_namelist
names(pick_1)
pick_1
stringr::str_detect(students10$`志願`,"北大經濟") -> ntpu_econ
ntpu_econ
names(ntpu_econ)
students10$`志願`[ntpu_econ]
read_csv("https://www.dropbox.com/s/xjzg1iuuws7tcha/table.csv?dl=1") -> table
stringr::str_detect(students10$`志願`,"北大經濟") -> ntpu_econ
students10$`性名`[ntpu_econ]
# congrats
ntpu_econ
stringr::str_detect(students10$`志願`,"北大經濟") -> ntpu_econ
ntpu_econ
students10$`姓名`[ntpu_econ]
# congrats
students10$`姓名`[ntpu_econ] %in% namelist -> ntpu_congret
ntpu_congret
ntpu_econ
ntpu_congret
students10$`姓名`[ntpu_econ]
ntpu_econ_names[ntpu_congret]
students10$`姓名`[ntpu_econ] -> ntpu_econ_names
ntpu_econ_names[ntpu_congret]
ntpu_econ_names[ntpu_congret] -> congrats_names
congrats_names
paste0("恭喜",congrats_names,"同學錄取國立臺北大學經濟系")
class(congrats)
paste0("恭喜",congrats_names,"同學錄取國立臺北大學經濟系") -> congrats
class(congrats)
stringr::str_detect(students10$`志願`,"北大經濟") -> ntpu_econ
ntpu_econ
students10$`姓名`[ntpu_econ] %in% namelist -> ntpu_congret
students10$`姓名`[ntpu_econ] -> ntpu_econ_names
ntpu_econ_names[ntpu_congret] -> congrats_names
paste0("恭喜",congrats_names,"同學錄取國立臺北大學經濟系") -> congrats
class(congrats)
congrats
pick_1 <- students10$`國文`[pick_ntpu] >= 12
students10$`英文`[pick_1] -> pick_En2
students10$`數學`[pick_1] -> pick_math2
pick_2 <- pick_math2 + pick_En2 >= 26
students10$`姓名`[pick_2] -> ntpu_eco
class(ntpu_eco)
ntpu_eco
pick_ntpu <- stringr::str_detect(students10$`志願`,"北大")
ntpu_namelist <- students10$`姓名`[pick_ntpu]
ntpu_namelist
levelsnews <- c(table$`國文`[c(15:1)])
chinese <- factor(table$`國文`,
levels=levelsnews,
ordered=T)
chinese
levelsnews <- c(table$`國文`[c(15:1)])
chinese <- as.factor(table$`國文`,
levels=levelsnews,
ordered=T)
View(table)
levelsnews <- c(table$`國文`[c(15:1)])
levelsnews
levelsnews <- c(table$`國文`[c(15:1)])
chinese <- factor(table$`國文`
levels=levelsnews
levelsnews <- c(table$`國文`[c(15:1)])
chinese <- factor(table$`國文`,
levels=levelsnews,
ordered = T)
chinese
chinese <- factor(table$`國文`,
levels=c(16:1),
ordered = T)
chinese
levelsnews <- c(table$`國文`[c(15:1)])
chinese <- factor(table$`國文`,
levels=levelsnews,
ordered = T)
chinese
levelsnews <- c(table$`國文`[c(15:1)])
chinese <- factor(table$`國文`[c(15:1)],
levels=levelsnews,
ordered = T)
chinese
levelsnews <- c(table$`國文`[c(15:1)])
levelsnews=c(1:16)
chinese <- factor(table$`國文`[c(15:1)],
levels=levelsnews,
ordered = T)
chinese
levelsnews <- c(table$`國文`[c(15:1)])
chinese <- factor(table$`國文`[c(15:1)],
levels=levelsnews,
ordered = T)
chinese
levels(chinese)
class(levels(chinese))
levels(chinese)=c("1":"16")
levelsnews <- c(table$`國文`[c(15:1)])
chinese <- factor(table$`國文`[c(15:1)],
levels=levelsnews,
ordered = T)
levels(chinese)=c("1":"16")
chinese
levelsnews <- c(table$`國文`[c(15:1)])
chinese <- factor(table$`國文`[c(15:1)],
levels=levelsnews,
ordered = T)
chinese
levelsnews <- c(table$`國文`[c(15:1)])
levelsnews=c("1":"16")
chinese <- factor(table$`國文`[c(15:1)],
levels=levelsnews,
ordered = T)
chinese
levelsnews <- c(table$`國文`[c(15:1)])
chinese <- factor(table$`國文`[c(15:1)],
levels=levelsnews,
ordered = T)
chinese
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
levels(factor(badEmployers$law)) -> violatedArticles
violatedArticles
table_countsByArticle <- table(badEmployers$law)
class(table_countsByArticle)
names(table_countsByArticle)
table_countsByArticle
pick_violation <- table_countsByArticle >= max(table_countsByArticle)
pick_violation
table_countsByArticle[pick_violation] -> mostViolatedArticle
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
mostViolatedArticle
table_lawscontent <- table(badEmployers$lawContent)
pick_lawscontent <- table_lawscontent >= max(table_lawscontent)
table_lawscontent[pick_lawscontent] -> mostViolatedArticle_content
mostViolatedArticle_content <- names(mostViolatedArticle_content)
class(mostViolatedArticle_content)
length(mostViolatedArticle_content)
mostViolatedArticle_content
table_dt <- table(badEmployers$dt)
pick_dt <- table_dt >= max(table_dt)
table_dt[pick_dt] -> popularSentenceMonth
popularSentenceMonth <- names(popularSentenceMonth)
class(popularSentenceMonth)
length(popularSentenceMonth)
popularSentenceMonth
read_csv("https://www.dropbox.com/s/xjzg1iuuws7tcha/table.csv?dl=1") -> table
source("https://www.dropbox.com/s/5oy56om4q0857tt/student10.R?dl=1",encoding = "UTF-8")
levelsnews <- c(table$`國文`[c(15:1)])
chinese <- factor(table$`國文`[c(15:1)],
levels=levelsnews,
ordered = T)
chinese
pick_ntpu <- stringr::str_detect(students10$`志願`,"北大")
ntpu_namelist <- students10$`姓名`[pick_ntpu]
ntpu_namelist
pick_1 <- students10$`國文`[pick_ntpu] >= 12
students10$`英文`[pick_1] -> pick_En2
students10$`數學`[pick_1] -> pick_math2
pick_2 <- pick_math2 + pick_En2 >= 26
students10$`姓名`[pick_2] -> ntpu_eco
class(ntpu_eco)
ntpu_eco
stringr::str_detect(students10$`志願`,"北大經濟") -> ntpu_econ
ntpu_econ
students10$`姓名`[ntpu_econ] %in% namelist -> ntpu_congret
students10$`姓名`[ntpu_econ] -> ntpu_econ_names
ntpu_econ_names[ntpu_congret] -> congrats_names
paste0("恭喜",congrats_names,"同學錄取國立臺北大學經濟系") -> congrats
class(congrats)
congrats
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
factor(table$`國文`) -> table$`國文`
levels(table$`國文`) <-
levels(table$`國文`)[c(1,2,11,3,4,5,6,7,8,9,10,11,12,13,14,15,16)]
ordered(table$`國文`) -> table$`國文`
taable$`國文` -> chinese
factor(table$`國文`) -> table$`國文`
levels(table$`國文`) <-
levels(table$`國文`)[c(1,2,11,3,4,5,6,7,8,9,10,11,12,13,14,15,16)]
ordered(table$`國文`) -> table$`國文`
table$`國文` -> chinese
chinese
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
as.integer(chinese)
