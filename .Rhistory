ordered = T)
chinese
levels(chinese)
class(levels(chinese))
levels(chinese)=c("1":"16")
levelsnews <- c(table$`國文`[c(15:1)])
chinese <- factor(table$`國文`[c(15:1)],
levels=levelsnews,
ordered = T)
levels(chinese)=c("1":"16")
chinese
levelsnews <- c(table$`國文`[c(15:1)])
chinese <- factor(table$`國文`[c(15:1)],
levels=levelsnews,
ordered = T)
chinese
levelsnews <- c(table$`國文`[c(15:1)])
levelsnews=c("1":"16")
chinese <- factor(table$`國文`[c(15:1)],
levels=levelsnews,
ordered = T)
chinese
levelsnews <- c(table$`國文`[c(15:1)])
chinese <- factor(table$`國文`[c(15:1)],
levels=levelsnews,
ordered = T)
chinese
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
levels(factor(badEmployers$law)) -> violatedArticles
violatedArticles
table_countsByArticle <- table(badEmployers$law)
class(table_countsByArticle)
names(table_countsByArticle)
table_countsByArticle
pick_violation <- table_countsByArticle >= max(table_countsByArticle)
pick_violation
table_countsByArticle[pick_violation] -> mostViolatedArticle
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
mostViolatedArticle
table_lawscontent <- table(badEmployers$lawContent)
pick_lawscontent <- table_lawscontent >= max(table_lawscontent)
table_lawscontent[pick_lawscontent] -> mostViolatedArticle_content
mostViolatedArticle_content <- names(mostViolatedArticle_content)
class(mostViolatedArticle_content)
length(mostViolatedArticle_content)
mostViolatedArticle_content
table_dt <- table(badEmployers$dt)
pick_dt <- table_dt >= max(table_dt)
table_dt[pick_dt] -> popularSentenceMonth
popularSentenceMonth <- names(popularSentenceMonth)
class(popularSentenceMonth)
length(popularSentenceMonth)
popularSentenceMonth
read_csv("https://www.dropbox.com/s/xjzg1iuuws7tcha/table.csv?dl=1") -> table
source("https://www.dropbox.com/s/5oy56om4q0857tt/student10.R?dl=1",encoding = "UTF-8")
levelsnews <- c(table$`國文`[c(15:1)])
chinese <- factor(table$`國文`[c(15:1)],
levels=levelsnews,
ordered = T)
chinese
pick_ntpu <- stringr::str_detect(students10$`志願`,"北大")
ntpu_namelist <- students10$`姓名`[pick_ntpu]
ntpu_namelist
pick_1 <- students10$`國文`[pick_ntpu] >= 12
students10$`英文`[pick_1] -> pick_En2
students10$`數學`[pick_1] -> pick_math2
pick_2 <- pick_math2 + pick_En2 >= 26
students10$`姓名`[pick_2] -> ntpu_eco
class(ntpu_eco)
ntpu_eco
stringr::str_detect(students10$`志願`,"北大經濟") -> ntpu_econ
ntpu_econ
students10$`姓名`[ntpu_econ] %in% namelist -> ntpu_congret
students10$`姓名`[ntpu_econ] -> ntpu_econ_names
ntpu_econ_names[ntpu_congret] -> congrats_names
paste0("恭喜",congrats_names,"同學錄取國立臺北大學經濟系") -> congrats
class(congrats)
congrats
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
factor(table$`國文`) -> table$`國文`
levels(table$`國文`) <-
levels(table$`國文`)[c(1,2,11,3,4,5,6,7,8,9,10,11,12,13,14,15,16)]
ordered(table$`國文`) -> table$`國文`
taable$`國文` -> chinese
factor(table$`國文`) -> table$`國文`
levels(table$`國文`) <-
levels(table$`國文`)[c(1,2,11,3,4,5,6,7,8,9,10,11,12,13,14,15,16)]
ordered(table$`國文`) -> table$`國文`
table$`國文` -> chinese
chinese
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
as.integer(chinese)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
back_regex <- "(?!弟)"
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
semiGodsSemiDevils$data[[1]]$section == "P2"
context_picked
semiGodsSemiDevils$data[[1]]$section == "P2" -> pick_2
semiGodsSemiDevils$data[[1]]$text[pick_2] -> context_picked
context_picked
textExample <- c("段1......。　　段2....。")
str_split(context_picked,paste0("\\s","\\s")) -> context_picked_split
str(context_picked_split)
# context_picked_split
str_split(context_picked,paste0("\\s","\\s")) -> context_picked_split
str(context_picked_split)
context_picked_split
str_extract_all(context_picked_split,"(段譽"|"段兄"|"段兄弟"|"段大哥"|"段相公"|"段君"|"及姓段的小子)") -> mention_duan
str_extract_all(context_picked_split,"(段譽|段兄|段兄弟|段大哥|段相公|段君|及姓段的小子)") -> mention_duan
class(mention_duan)
# mention_duan
mention_duan
class(mention_duan)[[1]]
context_picked_split[[1]]
str_extract_all(context_picked_split[[1]],"(段譽|段兄|段兄弟|段大哥|段相公|段君|及姓段的小子)") -> mention_duan
str_extract_all(context_picked_split[[1]],"(段譽|段兄|段兄弟|段大哥|段相公|段君|及姓段的小子)") -> mention_duan
class(mention_duan)
context_picked_split[[1]]
mention_duan
class(mention_duan)
str_view_all(mention_duan)
str_view_all(context_picked_split[[1]],"(段譽|段兄|段兄弟|段大哥|段相公|段君|及姓段的小子)")
mention_duan
?unlist
unlist(mention_duan)
table(duan_number)
unlist(mention_duan) -> duan_number
table(duan_number)
as,integer(table(duan_number))
as.integer(table(duan_number))
unlist(mention_duan) -> duan_number
unlist(mention_duan) -> duan_number
table(duan_number) -> table_duan
table_duan
class(table_duan)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
back_regex <- "(?!弟)"
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
semiGodsSemiDevils$data[[1]]$section == "P2" -> pick_2
semiGodsSemiDevils$data[[1]]$text[pick_2] -> context_picked
context_picked
class(context_picked)
textExample <- c("段1......。　　段2....。")
str_split(context_picked,paste0("\\s","\\s")) -> context_picked_split
str(context_picked_split)
context_picked_split
str_split(context_picked,paste0("\\s","\\s")) -> context_picked_split
str(context_picked_split)
context_picked_split
class(context_picked_split)
str(context_picked_split)
context_picked_split
str_extract_all(context_picked_split[[1]],"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)") -> mention_duan
class(mention_duan)
str_view_all(context_picked_split[[1]],"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
mention_duan
unlist(mention_duan) -> duan_number
table(duan_number) -> table_duan
class(table_duan)
table_duan
class(mention_duan)
str(mention_duan)
str_extract_all(context_picked_split[[1]],"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)") -> mention_duan
class(mention_duan)
str_view_all(context_picked_split[[1]],"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
str(mention_duan)
str(context_picked_split)
str_extract_all(context_picked_split[[1]],"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)") -> mention_duan
str_extract_all(context_picked_split[[1]],"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)") -> mention_duan
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
str_extract_all(context_picked_split[[1]],"段(譽|兄|兄弟|大哥|相公|君)|姓段的小子",pattern) -> mention_duan
class(mention_duan)
str_view_all(context_picked_split[[1]],"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
mention_duan
str_extract_all(context_picked_split[[1]],"段(譽|兄|兄弟|大哥|相公|君)|姓段的小子",pattern) -> mention_duan
class(mention_duan)
str_view_all(context_picked_split[[1]],"段(譽|兄|兄弟|大哥|相公|君)|姓段的小子",pattern)
mention_duan
unlist(mention_duan) -> duan_number
table(duan_number) -> table_duan
class(table_duan)
table_duan
str_view_all(mention_duan)
str_extract_all(context_picked_split[[1]],"段(譽|兄|兄弟|大哥|相公|君)|姓段的小子",pattern) -> mention_duan
class(mention_duan)
str_view_all(mention_duan)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
back_regex <- "(?!弟)"
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
semiGodsSemiDevils$data[[1]]$section == "P2" -> pick_2
semiGodsSemiDevils$data[[1]]$text[pick_2] -> context_picked
context_picked
textExample <- c("段1......。　　段2....。")
str_split(context_picked,paste0("\\s","\\s")) -> context_picked_split
str(context_picked_split)
context_picked_split
str_extract_all(context_picked_split[[1]],"段(譽|兄|兄弟|大哥|相公|君)|姓段的小子",pattern) -> mention_duan
class(mention_duan)
str_view_all(mention_duan)
str_extract_all(context_picked_split[[1]],"段(譽|兄|兄弟|大哥|相公|君)|姓段的小子",pattern) -> mention_duan
class(mention_duan)
str_view_all(context_picked_split[[1]],"段(譽|兄|兄弟|大哥|相公|君)|姓段的小子",pattern)
mention_duan
pattern2 <- paste0("段(譽|兄|兄弟|大哥|相公|君)|姓段的小子","(?!弟)")
str_extract_all(context_picked_split[[1]],pattern2) -> mention_duan
class(mention_duan)
str_view_all(context_picked_split[[1]],pattern2)
mention_duan
table(mention_duan)
mention_duan
unlist(mention_duan) -> duan_number
table(duan_number) -> table_duan
class(table_duan)
table_duan
pattern2 <- paste0("段(譽|兄|兄弟|大哥|相公|君)|姓段的小子","(?!弟)")
str_extract_all(context_picked_split[[1]],pattern2) -> mention_duan
class(mention_duan)
str_view_all(context_picked_split[[1]],pattern2)
mention_duan
unlist(mention_duan) -> duan_number
table(duan_number) -> table_duan
class(table_duan)
table_duan
pattern2 <- paste0("段(譽|兄|兄弟|大哥|相公|君)","(?!弟)","|姓段的小子")
str_extract_all(context_picked_split[[1]],pattern2) -> mention_duan
class(mention_duan)
str_view_all(context_picked_split[[1]],pattern2)
mention_duan
unlist(mention_duan) -> duan_number
table(duan_number) -> table_duan
class(table_duan)
table_duan
knitr::opts_chunk$set(echo = TRUE)
char1 <- c("Wild","Apple","Donald","May","Avocada")
factor1 <- factor(char1)
levels(factor1)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
sort(
str_sub(char2,1,1)
)
library(stringr)
char1 <- c("Wild","Apple","Donald","May","Avocada")
factor1 <- factor(char1)
levels(factor1)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
sort(
str_sub(char2,1,1)
)
sort(
str_sub(char2,2,2)
)
Sys.getlocale("LC_COLLATE")
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
View(covid19)
# 不可排序類別：性別、縣市、是否境外移入
covid19$縣市 <-
factor(covid19$縣市)
covid19$性別 <-
factor(covid19$性別)
covid19$是否為境外移入 <-
factor(
covid19$是否為境外移入
)
covid19$年齡層 <-
factor(
covid19$年齡層,
ordered=TRUE
)
levels(covid19$縣市)
levels(covid19$性別)
levels(covid19$是否為境外移入)
covid19$年齡層
levels(covid19$年齡層)
levels(covid19$性別)
covid19$性別 <- factor(covid19$性別, c("男","女"))
levels(covid19$性別)
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
print(population)
class(population)
names(population)
levels(covid19$縣市) # 是名稱字串向量
# 由於population元素值有names，可以用`[名稱字串向量]`取出所要的
levels(covid19$縣市) -> levelsInData
population[levelsInData] -> population
newLevels <- names(population)
newLevels
covid19$縣市 <-
factor(
covid19$縣市, levels=newLevels
)
levels(covid19$縣市)
print(covid19$縣市)
class(covid19$縣市)
View(covid19)
table(covid19$縣市)
print(covid19$縣市)
table(covid19$縣市) -> table_country
table_country <- as.integer(table_country)
sort(table_country,decreasing = T)
table(covid19$縣市) -> table_country
table_country <- as.integer(table_country)
sort(table_country,decreasing = T)
sort(table_country,decreasing = T) -> table_country
names(table_country)
as.character(table_country)
population
levels(covid19$縣市)
population[levels_city]
levels(covid19$縣市) -> levels_city
population[levels_city]
print(covid19$縣市)
print(covid19$縣市)
table(covid19$縣市)
print(covid19$縣市)
table(covid19$縣市) -> table_city
names(table_city)
print(covid19$縣市)
table(covid19$縣市) -> table_city
names(table_city)
class(table_city)
sort(table_city,decreasing = T)
names(table_city)
sort(table_city,decreasing = T) -> table_city
names(table_city)
table(covid19$縣市) -> table_city
sort(table_city,decreasing = T) -> table_city
names(table_city) -> newslevels
covid19$縣市 <- factor(covid19$縣市,newslevels)
levels(covid19$縣市)
table(covid19$`縣市`)
new<-table(covid19$`縣市`)
new_levels<-sort(new,decreasing = T)
names(new_levels)
levels(covid19$`縣市`)<-names(new_levels)
levels(covid19$`縣市`)
levels(covid19$年齡層)
level_names <- levels(covid19$年齡層)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
startingAges
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
names(startingAges) <- level_names
startingAges
sort(startingAges) -> startingAges
startingAges
class(startingAges)
covid19$年齡層 <-
factor(
covid19$年齡層, names(startingAges)
)
levels(covid19$年齡層)
covid19$年齡層 <-
factor(
covid19$年齡層, names(startingAges)
)
levels(covid19$年齡層)
factor1 <- factor(
c("A","A","C","A","D","F","D","D")
)
factor1
levels(factor1) <- c("優","佳","尚可","普")
factor1
factor1
levels(factor1)[[1]] <- "Excellent"
levels(factor1)[[1]] <- "Excellent"
levels(factor1)[c(3,4)] <- c("C","D")
factor1
factor1 <- factor(c("新北市","台北市","台中市","彰化市","基隆市","苗栗縣","苗栗縣"))
factor1
factor1 <- factor(c("新北市","台北市","台中市","彰化市","基隆市","苗栗縣","苗栗縣"))
factor1
levels(factor1) <- c("中部","北部","北部","中部","北部","中部")
factor1
factor1 <- factor(c("0-4歲","5-9歲","10歲以上","0-4歲","5-9歲","5-9歲","10歲以上"))
factor1
levels(factor1) <- c("0-9歲","10歲以上","0-9歲")
factor1
covid19$地區 <- covid19$縣市
levels(covid19$地區)
currentLevels <- levels(covid19$地區)
north_regex <- "宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹市|新竹縣"
middle_regex <- "苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
"嘉義市|嘉義縣|[台臺]南[縣市]|高雄市|屏東縣|澎湖縣"
east_regex <- "花蓮縣|台東縣"
currentLevels <- str_replace(currentLevels,
north_regex, "北部")
currentLevels
currentLevels <- str_replace(currentLevels,
middle_regex, "中部")
currentLevels
currentLevels <- str_replace(currentLevels,
south_regex, "南部")
newLevels <- str_replace(currentLevels,
east_regex, "東部")
newslevels
currentLevels <- str_replace(currentLevels,
north_regex, "北部")
currentLevels
currentLevels <- str_replace(currentLevels,
middle_regex, "中部")
currentLevels
currentLevels <- str_replace(currentLevels,
south_regex, "南部")
newLevels <- str_replace(currentLevels,
east_regex, "東部")
newslevels
newLevels
covid19$地區
levels(covid19$地區) <- newLevels
covid19$地區
levels(covid19$年齡層)
start <- seq(5, 55, by=10) # 由5到55，每個值差10的數值向量
end <- seq(14, 64, by=10)
iddleLevels <-
rep(
paste0(start,"-",end),
each=2)
middleLevels <-
rep(
paste0(start,"-",end),
each=2)
levels(covid19$年齡層)
levels(covid19$年齡層) <- newLevels
covid19$年齡層
levels(covid19$年齡層)
# 創造10歲間距的所有可能
start <- seq(5, 55, by=10) # 由5到55，每個值差10的數值向量
end <- seq(14, 64, by=10)
middleLevels <-
rep(
paste0(start,"-",end),
each=2) # 每個新間距要2個
newLevels <- c("4", middleLevels, "65+", "65+")
levels(covid19$年齡層) <- newLevels
covid19$年齡層
covid19$年齡層
covid19$年齡層
newLevels
covid19$年齡層
newLevels
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
factor2[[6]] <- "差"
factor2 # 元素6變NA
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
# 先擴大levels
levels(factor2) <- c(levels(factor2), "差")
levels(factor2)
factor2[[6]] <- "差"
factor2
levels(factor2)
factor2[[6]] <- "差"
factor2
factor1 <- factor(c("好", "壞", "壞"))
factor2 <- factor(c("壞", "好", "好"))
c(factor1, factor2)
factor1[4:6] <- factor2
factor1
levels(covid19$性別)
levels(covid19$性別)
levels(covid19$性別) <- c("Male","Female")
covid19
covid19$性別
