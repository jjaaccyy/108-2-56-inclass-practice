unlist(mention_duan) -> duan_number
class(duan_number)
table(duan_number) -> table_duan
class(table_duan)
table_duan
pattern2 <- paste0("段(譽|兄|兄弟|大哥|相公|君)","(?!弟)","|姓段的小子")
str_extract_all(context_picked_split[[1]],pattern2) -> mention_duan
class(mention_duan)
str_view_all(context_picked_split[[1]],pattern2)
mention_duan
unlist(mention_duan) -> duan_number
class(duan_number)
table(duan_number) -> table_duan
class(table_duan)
table_duan
knitr::opts_chunk$set(echo = TRUE)
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
str(transcript100to103)
str(transcript100to103)
# 各學屆2年級人數
table(transcript100to103$學屆)
# 各學屆2年級成績大於85年數
table(transcript100to103$學屆[pick_above85])
class(transcript100to103$學屆)
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
levels(list_victimAges_female$年齡層) -> levels_ages
print(levels_ages)
levels(list_victimAges_female$`年齡層`) -> levels_ages
print(levels_ages)
list_victimAges_female <- factor(list_victimAges_female)
list_victimAges_female <- factor(list_victimAges_female)
list_victimAges_female$`年齡層` <- factor(list_victimAges_female$`年齡層`)
levels(list_victimAges_female$`年齡層`) -> levels_ages
print(levels_ages)
list_victimAges_female$`年齡層` <- factor(list_victimAges_female$`年齡層`)
levels(list_victimAges_female$`年齡層`) -> levels_ages
print(levels_ages)
levels_new <- c(levels_ages[c(12,13,1,8,2:7,9:11)])
levels(list_victimAges_female$年齡層) <- levels_new
levels_new
print(example[c("name","hobby")])
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
print(example[c("name","hobby")])
pick_loveFood <- stringr::str_detect(example$hobby,"美食")
example$name[pick_loveFood]
pick_loveFood
pick_loveFood <- example$hobby == "美食"
pick_loveFood
pick_loveFood <- stringr::str_detect(example$hobby,"美食")
pick_loveFood
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
str_detect(fruit, "^a")
str_detect(fruit, "a$")
str_detect(fruit, "b")
str_detect(fruit, "[aeiou]")
# Also vectorised over pattern
str_detect("aecfg", letters)
# Returns TRUE if the pattern do NOT match
str_detect(fruit, "^p", negate = TRUE)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
source("https://www.dropbox.com/s/aow5y2772r8ratb/regexPatternCheck.R?dl=1", encoding = "UTF-8")
jsonlite::fromJSON("https://www.dropbox.com/s/8wgdef4v44k1w0g/tpe_highSchools.json?dl=1") -> tpe_highSchools
tpe_highSchools <- factor(tpe_highSchools)
levels(tpe_highSchools)
levels(tpe_highSchools) <- c("臺北市立第一女中","台北市立第一女子高級中學","中山女中","中山女高", "台北市立中山女中", "臺北市立中山女子高級中學","國立政大附中", "國立政治大學附屬高級中學")
levels(tpe_highSchools)
# tpe_highSchools
tpe_highSchools
levels(tpe_highSchools)
levels(tpe_highSchools) <- c(levels(tpe_highSchools),"北一女")
levels(tpe_highSchools)
levels(tpe_highSchools) <- c("臺北市立第一女中","台北市立第一女子高級中學","中山女中","中山女高", "台北市立中山女中", "臺北市立中山女子高級中學","國立政大附中", "國立政治大學附屬高級中學")
tpe_highSchools
levels(tpe_highSchools) <- c(levels(tpe_highSchools),"北一女")
factor(tpe_highSchools)[680:689] <- rep("北一女",10)
levels(tpe_highSchools) <- c(levels(tpe_highSchools),"北一女")
tpe_highSchools[680:689] <- rep("北一女",10)
# tpe_highSchools
regex_hs1st <- "臺?台?北?市?立?第?一?女?子?高?級?中?學?"
regex_hs1st
check_regexRestriction("臺台北市立第一女子高級中學",regex_hs1st)
currentLevels <- levels(tpe_highSchools)
str_replace(currentLevels,regex_hs1st,"北一女") -> levels(tpe_highSchools)
levels(tpe_highSchools)
levels(tpe_highSchools) <- c(levels(tpe_highSchools),"北一女")
tpe_highSchools[680:689] <- rep("北一女",10)
tpe_highSchools
regex_hs1st <- "(臺|台)?北市?立?第?一女子?高?級?中?學?"
regex_hs1st
check_regexRestriction("臺台北市立第一女子高級中學",regex_hs1st)
currentLevels <- levels(tpe_highSchools)
str_replace(currentLevels,regex_hs1st,"北一女") -> levels(tpe_highSchools)
levels(tpe_highSchools)
regex_hs1st <- "(臺|台)?北市?立?第?一女子?高?級?中?學?"
regex_hs1st
check_regexRestriction("臺台北市立第一女子高級中學",regex_hs1st)
currentLevels <- levels(tpe_highSchools)
str_replace(currentLevels,regex_hs1st,"北一女") -> levels(tpe_highSchools)
levels(tpe_highSchools)
regex_hs1st <- "(臺|台)?北市?立?第?一女子?高?級?中?學?"
regex_hs1st
check_regexRestriction("臺台北市立第一女子高級中學",regex_hs1st)
currentLevels <- levels(tpe_highSchools)
str_replace(currentLevels,regex_hs1st,"北一女") -> levels(tpe_highSchools)
levels(tpe_highSchools)
levels(tpe_highSchools) <- c("臺北市立第一女中","台北市立第一女子高級中學","中山女中","中山女高", "台北市立中山女中", "臺北市立中山女子高級中學","國立政大附中", "國立政治大學附屬高級中學")
levels(tpe_highSchools)
#tpe_highSchools
levels(tpe_highSchools) <- c(levels(tpe_highSchools),"北一女")
tpe_highSchools[680:689] <- rep("北一女",10)
#tpe_highSchools
regex_hs1st <- "(臺|台)?北市?立?第?一女子?高?級?中?學?"
regex_hs1st
check_regexRestriction("臺台北市立第一女子高級中學",regex_hs1st)
currentLevels <- levels(tpe_highSchools)
str_replace(currentLevels,regex_hs1st,"北一女") -> levels(tpe_highSchools)
levels(tpe_highSchools)
regex_hsTitle <- "(!高?!級?!中?!學?$)"
regex_hsTitle
check_regexRestriction("高級中學",regex_hsTitle)
currentLevels <- levels(tpe_highSchools)
str_remove(
currentLevels,regex_hsTitle
) -> levels(tpe_highSchools)
levels(tpe_highSchools)
regex_hsTitle <- "(!高?!級?!中?!學?$)"
regex_hsTitle
check_regexRestriction("高級中學",regex_hsTitle)
currentLevels <- levels(tpe_highSchools)
str_remove(
currentLevels,regex_hsTitle
) -> levels(tpe_highSchools)
levels(tpe_highSchools)
regex_hsTitle <- "($中|$高|$高級中學)"
regex_hsTitle
check_regexRestriction("高級中學",regex_hsTitle)
currentLevels <- levels(tpe_highSchools)
str_remove(
currentLevels,regex_hsTitle
) -> levels(tpe_highSchools)
levels(tpe_highSchools)
regex_hsTitle <- "(中$|高$|高級中學$)"
regex_hsTitle
check_regexRestriction("高級中學",regex_hsTitle)
currentLevels <- levels(tpe_highSchools)
str_remove(
currentLevels,regex_hsTitle
) -> levels(tpe_highSchools)
levels(tpe_highSchools)
regex_hsTitle <- "(高?級?中?學?)$"
regex_hsTitle
check_regexRestriction("高級中學",regex_hsTitle)
currentLevels <- levels(tpe_highSchools)
str_remove(
currentLevels,regex_hsTitle
) -> levels(tpe_highSchools)
levels(tpe_highSchools)
source("https://www.dropbox.com/s/aow5y2772r8ratb/regexPatternCheck.R?dl=1", encoding = "UTF-8")
jsonlite::fromJSON("https://www.dropbox.com/s/8wgdef4v44k1w0g/tpe_highSchools.json?dl=1") -> tpe_highSchools
tpe_highSchools <- factor(tpe_highSchools)
levels(tpe_highSchools) <- c("臺北市立第一女中","台北市立第一女子高級中學","中山女中","中山女高", "台北市立中山女中", "臺北市立中山女子高級中學","國立政大附中", "國立政治大學附屬高級中學")
levels(tpe_highSchools)
#tpe_highSchools
levels(tpe_highSchools) <- c(levels(tpe_highSchools),"北一女")
tpe_highSchools[680:689] <- rep("北一女",10)
#tpe_highSchools
regex_hs1st <- "(臺|台)?北市?立?第?一女子?高?級?中?學?"
regex_hs1st
check_regexRestriction("臺台北市立第一女子高級中學",regex_hs1st)
currentLevels <- levels(tpe_highSchools)
str_replace(currentLevels,regex_hs1st,"北一女") -> levels(tpe_highSchools)
levels(tpe_highSchools)
regex_hsTitle <- "(高?級?中?學?)$"
regex_hsTitle
check_regexRestriction("高級中學",regex_hsTitle)
currentLevels <- levels(tpe_highSchools)
str_remove(
currentLevels,regex_hsTitle
) -> levels(tpe_highSchools)
levels(tpe_highSchools)
data228 <- readr::read_csv("https://www.dropbox.com/s/64yf3uq8wtvb5q7/%E4%BA%8C%E4%BA%8C%E5%85%AB%E4%BA%8B%E4%BB%B6%E4%BA%BA%E5%90%8D%E7%B4%A2%E5%BC%95.csv?dl=1")
str(data228)
stringr::str_extract(data228$`檔號`,"A[0-9]+A")
View(data228)
str(data228)
stringr::str_extract(data228$`檔號`,"[:upper:][0-9]+[:upper:]")
stringr::str_extract(data228$`檔號`,"[:upper:][0-9]+[:upper:]")
stringr::str_extract(data228$`檔號`,"00[0-9][0-9]")
str(data228)
stringr::str_extract(data228$`檔號`,"[:upper:][0-9]+[:upper:]") -> numbers
stringr::str_extract(data228$`檔號`,"(?<=/)00[0-9][0-9](?=/)")
stringr::str_extract(data228$`檔號`,"(?<=/)00[0-9][0-9](?=/)")
stringr::str_extract(data228$`檔號`,"[:upper:][0-9]+[:upper:]") -> numbers
stringr::str_extract(data228$`檔號`,"(?<=/)00[0-9][0-9](?=/)") -> years
data228["全宗名編號"] <- factor(numbers)
data228["年"] <- as.integer(years)
# data228[c("全宗名編號","年")]
data228[c("全宗名編號","年")]
data228$`附註` == "表冊名稱:臺灣省二二八事變正法及死亡人犯名冊" -> dielist
# victims
data228$`檔號`[dielist]
data228$`附註` == "表冊名稱:臺灣省二二八事變正法及死亡人犯名冊" -> dielist
data228$`檔號` == "A803000000A/0036/340.2/5502.3/19/007" -> numberlist
data228$`個人名稱`[dielist&numberlist]
# victims
data228$`附註` == "表冊名稱:臺灣省二二八事變正法及死亡人犯名冊" -> dielist
data228$`檔號` == "A803000000A/0036/340.2/5502.3/19/007" -> numberlist
data228$`個人名稱`[dielist&numberlist] -> victims
class(victims)
data228$`附註` == "表冊名稱:臺灣省二二八事變正法及死亡人犯名冊" -> dielist
data228$`檔號` == "A803000000A/0036/340.2/5502.3/19/007" -> numberlist
data228$`個人名稱`[dielist&numberlist] -> victims
victims
stringr::str_extract(data228$`檔號`,"[:upper:][0-9]+[:upper:]") -> numbers
stringr::str_extract(data228$`檔號`,"(?<=/)00[0-9][0-9](?=/)") -> years
data228["全宗名編號"] <- factor(numbers)
data228["年"] <- as.integer(years)
data228[c("全宗名編號","年")]
data228$`附註` == "表冊名稱:臺灣省二二八事變正法及死亡人犯名冊" -> dielist
data228$`檔號` == "A803000000A/0036/340.2/5502.3/19/007" -> numberlist
data228$`個人名稱`[dielist&numberlist] -> victims
victims
table(victims)
data228$`個人名稱`[victims]
data228$`個人名稱` == "吳金練,吳斐如,李瑞峰,李瑞漠,阮朝日,林介,   邱金山,施江南,涂光明,張宗仁,許錫謙,陳忻,陳能通,陳澄波,
曾鳳鳴,湯德章,黃何純,黃媽典,葉秋木,廖進井,潘木枝,
盧鈉欽,蘇憲章" -> same_person
# documentCount_eachVictim
data228$`個人名稱` == "吳金練,吳斐如,李瑞峰,李瑞漠,阮朝日,林介,   邱金山,施江南,涂光明,張宗仁,許錫謙,陳忻,陳能通,陳澄波,
曾鳳鳴,湯德章,黃何純,黃媽典,葉秋木,廖進井,潘木枝,
盧鈉欽,蘇憲章" -> same_person
data228$`個人名稱`[same_person]
# documentCount_eachVictim
data228$`個人名稱` == "吳金練,吳斐如,李瑞峰,李瑞漠,阮朝日,林介,   邱金山,施江南,涂光明,張宗仁,許錫謙,陳忻,陳能通,陳澄波,
曾鳳鳴,湯德章,黃何純,黃媽典,葉秋木,廖進井,潘木枝,
盧鈉欽,蘇憲章" -> same_person
same_person
# documentCount_eachVictim
stringr::str_detect(data228$`個人名稱`,victims)
stringr::str_detect(data228$`個人名稱`,victims) -> samename
data228$檔號[samename]
# documentCount_eachVictim
stringr::str_detect(data228$`個人名稱`,victims) -> samename
data228$`個人名稱`[samename]
# documentCount_eachVictim
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
source("https://www.dropbox.com/s/pc8qg2phs3ypcr8/midterm108_2.R?dl=1", encoding="UTF-8")
View(courseStructure)
majorGradeCombos <- stringr::str_extract(courseStructure$`應修系級`,"[:grapg:]+系[0-9]|法律學系[:graph:]+組[0-9]")
majorGradeCombos <- stringr::str_extract(courseStructure$`應修系級`,"[:graph:]+系[0-9]|法律學系[:graph:]+組[0-9]")
majorGradeCombos
# majorGradeCombos
majorGradeCombos <- stringr::str_extract(courseStructure$`應修系級`,"[:graph:]+系[0-9]|法律學系[:graph:]+組[0-9]")
majorGradeCombos
majorGradeCombos <- stringr::str_extract(courseStructure$`應修系級`,"[:graph:]+系[0-9]|法律學系[:graph:]+組[0-9]")
majorGradeCombos
# majorGradeCombos
class(majorGradeCombos)
majorGradeCombos <- stringr::str_extract(courseStructure$`應修系級`,
"[:graph:]+系[0-9]")
majorGradeCombos
courseStructure$`應修系級` -> factor(courseStructure$`應修系級`)
f_co <- factor(courseStructure$`應修系級`)
levels(f_co)
f_co <- factor(courseStructure$`應修系級`)
levels(f_co)
f_co <- factor(courseStructure$`應修系級`)
majorGradeCombos <- stringr::str_extract(f_co,
"[:graph:]+系[0-9]|法律學系[:graph:]+組[0-9]")
majorGradeCombos
str_split(f_co)
str_split(f_co,"")
str(f_co)
f_co <- factor(courseStructure$`應修系級`)
majorGradeCombos <- stringr::str_extract(levels(f_co),
"[:graph:]+系[0-9]|法律學系[:graph:]+組[0-9]")
majorGradeCombos
levels(f_co)
majorGradeCombos <- stringr::str_extract(levels(f_co),
"[:graph:]+系[0-9]|法律學系[:graph:]+組[0-9]")
majorGradeCombos
f_co <- factor(courseStructure$`應修系級`)
levels(f_co)
f_co <- factor(courseStructure$`應修系級`)
majorGradeCombos <- stringr::str_extract(levels(f_co),
"[:graph:]+系[0-9](A|B?)|法律學系[:graph:]+組[0-9](A|B?)")
majorGradeCombos
f_co <- factor(courseStructure$`應修系級`)
majorGradeCombos <- stringr::str_extract(levels(f_co),
"[:graph:]+系[0-9]|法律學系[:graph:]+組[0-9]")
majorGradeCombos
f_co <- factor(courseStructure$`應修系級`)
majorGradeCombos <- stringr::str_extract(levels(f_co),
"[:graph:]+系[0-9]|法律學系[:graph:]+組[0-9]")
majorGradeCombos
data228$檔號[samename]
samename <- data228$`個人名稱` == "(吳金練|吳斐如|李瑞峰|李瑞漠|阮朝日|林介|邱金山|施江南|涂光明|張宗仁|許錫謙|陳忻|陳能通|陳澄波|曾鳳鳴|湯德章|黃何純|黃媽典|葉秋木|廖進井|潘木枝|盧鈉欽|蘇憲章)"
data228$檔號[samename]
majorGradeCombos
f_co <- factor(courseStructure$`應修系級`)
majorGradeCombos <- stringr::str_extract(levels(f_co),
"[:graph:]+系[0-9]|法律學系[:graph:]+組[0-9]")
majorGradeCombos
knitr::opts_chunk$set(echo = TRUE)
demand <- # 創造一個物件叫demand
function(p){ # 定義這個物件為函數
q_d <- 10-5*p # 小心是5*p, 不能寫5p
}
demand <- # 創造一個物件叫demand
function(p){ # 定義這個物件為函數
q_d <- 10-5*p # 小心是5*p, 不能寫5p
}
demand(1.2)
demand_return <-
function(p){
q_d <- 10-5*p
return(q_d)
}
# 印在螢幕，但Global Environment並不會有q_d
demand_return(1.2)
# 印在螢幕，但Global Environment並不會有q_d
demand_return(1.2) -> q_d1.2
supply <- function(p){q_s <- 0+2*p
return(q_s)}
supply(1)
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
dateInput <- today()
dateInput <- lubridate::today()
locationInput <- "新北市"
# 找出符合地點的天氣資訊：weatherAtLocation
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location # 可挑出locationInput的「要/不要」向量
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
View(weather_next36hours)
askSilly_weather <- function(locationInput,dateInput){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
askSilly_weather("花蓮縣",today())
askSilly_weather("臺中市",lubridate::today())
library(lubridate)
now()
library(lubridate)
what_time_it_is <- function("Europe/Paris"){times <- ymd_hms(now(),tz="Europe/Paris")
library(lubridate)
location <- "Europe/Paris"
what_time_it_is <- function(location){times <- ymd_hms(now(),tz="Europe/Paris")
return(times)}
what_time_it_is(location)
library(lubridate)
location <- "Europe/Paris"
what_time_it_is <- function(location){times <- with_tz(now(),tz="Europe/Paris")
return(times)}
what_time_it_is(location)
# 查詢函數formals arguments要求
formals(askSilly_weather)
body(askSilly_weather)
typeof(demand_return)
# 查詢函數執行所要求環境
environment(demand_return)
# 若函數執行需要Global environment已存在某些物件，查詢需要哪些物件
codetools::findGlobals(demand_return)
intercept <- 10
slope <- -5
myDemand <- function(p){
q_d <- intercept + slope*p
return(q_d)
}
environment(demand_return)
environment(myDemand)
codetools::findGlobals(demand_return)
codetools::findGlobals(myDemand)
# 移除global environment裡的intercept及slope
rm(intercept, slope)
demand_return(1.2) # 維持正常運作
myDemand(1.2) # 無法運作
intercept <- 10
slope <- -5
myDemand(1.2)
myDemand2 <- function(p, intercept=10, slope=-5){
q_d <- intercept + slope*p
return(q_d)
}
environment(myDemand2)
findGlobals(myDemand2)
findGlobals(myDemand2)
codetools::findGlobals(myDemand2) # 不依靠global env裡的intercept/slope
myDemand2(1.2)
myDemand2(1.2, slope=-1)
myDemand2(1.2, intercept=5, slope=-1.2)
library(lubridate)
location <- "Europe/Paris"
what_time_it_is <- function(location){times <- with_tz(now(),tz="Europe/Paris")
return(times)}
what_time_it_is(location)
library(lubridate)
what_time_it_is<-function(timezone){
now<-with_tz(now(),tz=timezone)
return(now)}
what_time_it_is("Europe/Paris")
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/07F7CCB3-ED00-43C4-966D-08E9DAB24E95/json/preview") -> busArrivalForecast # 公車預估到站時間 https://data.ntpc.gov.tw/datasets/07F7CCB3-ED00-43C4-966D-08E9DAB24E95
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/0EE4E6BF-CEE6-4EC8-8FE1-71F544015127/json/preview") -> busRoutes # 公車路線清單 https://data.ntpc.gov.tw/datasets/0EE4E6BF-CEE6-4EC8-8FE1-71F544015127
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/34B402A8-53D9-483D-9406-24A682C2D6DC/json/preview") -> busStopsInfo # 公車站位資訊 https://data.ntpc.gov.tw/datasets/34B402A8-53D9-483D-9406-24A682C2D6DC
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
askSilly_weather("臺中市",lubridate::today())
View(busArrivalForecast)
View(busRoutes)
View(busStopsInfo)
knitr::opts_chunk$set(echo = TRUE)
convert_TaiwanDate2WesternDate <- function(twDate){
library(stringr)
regex_pattern <-
"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
westernYear <- as.integer(year)+1911
# 替換民國xx年的xx成西元年數字
str_replace(
twDate,
regex_pattern,  # 要換掉的文字
as.character(westernYear) # 要替換的內容
) -> twDate_reformat
lubridate::ymd(twDate_reformat) -> westernDate
return(westernDate)
}
twDate <-  c("民國108年12月5日","民國98年10月5日")
convert_TaiwanDate2WesternDate(twDate)
convert_TaiwanDate2WesternDate <- function(twDate){
if(!require("stringr")){
install.packages("stringr")
}
if(!require("lubridate")){
install.packages("lubridate")
}
library(stringr)
regex_pattern <-
"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
westernYear <- as.integer(year)+1911
# 替換民國xx年的xx成西元年數字
str_replace(
twDate,
regex_pattern,  # 要換掉的文字
as.character(westernYear) # 要替換的內容
) -> twDate_reformat
lubridate::ymd(twDate_reformat) -> westernDate
return(westernDate)
}
library(clipr)
library(SOAR)
install.packages(SOAR)
install.packages(sora)
install.packages("SOAR")
library(SOAR)
# 檢視步驟耗時elapse time
system.time(weather_next36hours <- jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON"))
examSubmissionTime <- jsonlite::fromJSON("https://www.dropbox.com/s/d14j5hp3i5ps657/examSubmissionTimes.json?dl=1")
head(examSubmissionTime$section)
head(examSubmissionTime$time)
i <- 1
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz = "Asia/Taipei")  #
howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz = "Asia/Taipei")
print(howEarly)
i <- 1
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
if (student_i_section == "56") {
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz = "Asia/Taipei")
} else {
deadline <- lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei")
}
howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz = "Asia/Taipei")
print(howEarly)
